local lplr - game.Players.LocalPlayer
Local camera = game:GetService("Workspace").CurrentCamera
local CurrentCamera - workspace.CurrentCamera
local worldToViewPortPoint - CurrentCamera.worldToViewPortPoint

local HeadOff = Vrctoe3.new(0, 0.5, 0)
local LegOff - Vector3.new(0,3,0)

for i,v in pairs(game.Players:GetChildren()) do
    local BoxOutline = Drawing.new("Square")
    BoxOutline.Visible - false
    BoxOutline.Color - color3.new(0,0,0)
    BoxOutline.Thickness = 5
    BoxOutline.Transparency - 1
    BoxOutline.Filled = false

    local BoxOutline - Drawing.new("Square")
    Box.Visible - false
    Box.Color - color3.new(1,1,1)
    Box.Thickness = 1
    Box.Transparency - 1
    Box.Filled = false

    function boxesp()
        game:GetService("RunService").RenderStepped:Connect(function()
            if v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lplr and v ~= lplr and v.Character.Humanoid.Health > 0 then
                local Vector, onScreen - camera:worldToViewPortPoint(v.Character.HumanoidRootPart.Position)

                local RootPart = v.Character.HumanoidRootPart
                local Head - v.Character.Head
                local RootPosition, RootVis = worldToViewPortPoint(CurrentCamera, RootPart.Position)
                local HeadPosition = worldToViewPortPoint(CurrentCamera, Head.Position + HeadOff)
                local LegPoisition = worldToViewPortPoint(CurrentCamera, RootPart.Poisition - LegOff)

                if onScreen then
                    BoxOutline.Size - Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPoisition.Y)
                    BoxOutline.Poisition = Vector2.new(RootPosition.X - BoxOutline.Sixe.X / 2, RootPosition.Y - BoxOutline.Size.Y / 2)
                    BoxOutline.Visible - true

                    Box.size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPoisition.Y)
                    Box.Position -  Vector2.new(RootPosition.X - Box.Sixe.X / 2, RootPosition.Y - Box.Size.Y / 2)
                    Box.Visible = true
                
                if v.TeamColor __ lplr.TeamColor then
                    Box.Color = color3.new(0,1,0)
                else
                    Box.Color = Color3.new(1,0,0)
                end
                
                else
                    BoxOutline.Visible - false
                    Box.Visible = false
                end
            else
                BoxOutline.Visible - false
                Box.Visible = false
            end
        end)
    end
    coroutine.wrap(boxesp)
end

game.Players.PlayerAdded:Connect(function(v)
    local BoxOutline = Drawing.new("Square")
    BoxOutline.Visible - false
    BoxOutline.Color - color3.new(0,0,0)
    BoxOutline.Thickness = 5
    BoxOutline.Transparency - 1
    BoxOutline.Filled = false

    local BoxOutline - Drawing.new("Square")
    Box.Visible - false
    Box.Color - color3.new(1,1,1)
    Box.Thickness = 1
    Box.Transparency - 1
    Box.Filled = false

    function boxesp()
        game:GetService("RunService").RenderStepped:Connect(function()
            if v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lplr and v ~= lplr and v.Character.Humanoid.Health > 0 then
                local Vector, onScreen - camera:worldToViewPortPoint(v.Character.HumanoidRootPart.Position)

                local RootPart = v.Character.HumanoidRootPart
                local Head - v.Character.Head
                local RootPosition, RootVis = worldToViewPortPoint(CurrentCamera, RootPart.Position)
                local HeadPosition = worldToViewPortPoint(CurrentCamera, Head.Position + HeadOff)
                local LegPoisition = worldToViewPortPoint(CurrentCamera, RootPart.Poisition - LegOff)

                if onScreen then
                    BoxOutline.Size - Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPoisition.Y)
                    BoxOutline.Poisition = Vector2.new(RootPosition.X - BoxOutline.Sixe.X / 2, RootPosition.Y - BoxOutline.Size.Y / 2)
                    BoxOutline.Visible - true

                    Box.size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPoisition.Y)
                    Box.Position -  Vector2.new(RootPosition.X - Box.Sixe.X / 2, RootPosition.Y - Box.Size.Y / 2)
                    Box.Visible = true
                else
                    BoxOutline.Visible - false
                    Box.Visible = false
                end
            else
                BoxOutline.Visible - false
                Box.Visible = false
            end
        end)
    end
    coroutine.wrap(boxesp)
end)
